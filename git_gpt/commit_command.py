import subprocess
import tempfile
import click
import git
from .request_module import RequestModule
from .config_command import get_config
import os

system_instruction = "You are going to work as a text generator, **you don't talk at all**, you will print your response in plain text without code block."

commit_message_prompt = """You are going to work as commit message generator, you will print the message without code block, and **You don't talk**.

Please analyze staged diffs:
```diff
[insert_diff]
```
Then, craft a conventional commit message a title under 50 characters and a list of details about changes under 70 characters to describe the commit in [insert_language]. 
Use appropriate type (e.g., 'feat:', 'fix:', 'docs:', 'style:', 'refactor:', 'test:', 'chore:', etc.). 

Here's the required format of the commit message

```txt
<type>[optional scope]: <title>

Added(If applicable):
- [List new features that have been added.]
- [Include details about new modules, UI enhancements, etc.]

Changed(If applicable):
- [Describe any changes to existing functionality.]
- [Note improvements, restructurings, or changes in behavior.]

Deprecated(If applicable):
- [Document any features that are still available but are not recommended for use and will be removed in future versions.]

Removed(If applicable):
- [List features or components that have been removed from this version.]

Fixed(If applicable):
- [Highlight fixed bugs or issues.]
- [Include references to any tickets or bug report IDs if applicable.]

Security(If applicable):
- [Mention any security improvements or vulnerabilities addressed in this version.]

```
"""

@click.command()
@click.option('--lang', '-l', default=None, help='Target language for the generated message.')
@click.option('--model', '-m', default=None, help='The model to use for generating the commit message.')
@click.option('--run-dry', '-d', is_flag=True, help='Run the command to print the commit message without actually committing.')
def commit(lang, model, run_dry):
    config = get_config()

    # If arguments are not provided via command line, try to get them from the config file
    lang = lang or config.get('lang', 'English')
    model = model or config.get('model', 'gpt-3.5-turbo')

    repo = git.Repo(os.getcwd())
    # add all changes to staged
    repo.git.add('--all')
    diff = repo.git.diff('--staged')  # Get textual representation of staged diffs

    try:
        request_module = RequestModule(config)

        click.echo(f"Generating commit message with {model} in {lang}...")

        prompt = commit_message_prompt.replace('[insert_diff]', diff).replace('[insert_language]', lang)

        messages = [
            {"role": "system", "content": system_instruction},
            {"role": "user", "content": prompt}
        ]

        response = request_module.send_request(messages=messages, model=model, temperature=0.7)
        commit_message = request_module.get_response_content(response)

        if run_dry:
            click.echo(f"Commit message generated successfully:\n\n{commit_message}")
            return
        
        # Create a temporary file to hold the commit message
        with tempfile.NamedTemporaryFile(mode='w+', delete=False) as temp_file:
            temp_file.write(f"# Generated by git-gpt\n\n{commit_message}")
            temp_file_name = temp_file.name

        # Use git to open the commit message editing dialog
        try:
            subprocess.run(['git', 'commit', '-e', '-F', temp_file_name], check=True)
            click.echo("Commit created successfully.")
            click.echo("Please run `git commit --amend` to edit the commit message if needed.")
        except subprocess.CalledProcessError:
            click.echo("Failed to create commit. Aborting.")
        finally:
            # Clean up the temporary file
            os.remove(temp_file_name)

    except ValueError as e:
        click.echo(f"Error: {str(e)}")
        click.echo("Please make sure you have set the API key using `git-gpt config --api-key <API_KEY>`")
    except Exception as e:
        click.echo(f"Error generating commit message: {str(e)}")
        click.echo("Please check the request_module.py file for more details on the error.")